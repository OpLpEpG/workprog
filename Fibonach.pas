unit Fibonach;

interface

uses System.SysUtils;

// один разделительный 0 бит L = 16+1
procedure Encode(const Data: array of Word; Bits: Integer; var CurBit: Boolean; var bin: TArray<Boolean>); overload;
// два разделительных инверсных бита начало и конец L = 1+16+1
procedure Encode(const Data: array of Word; Bits: Integer; var bin: TArray<Boolean>); overload;
procedure EncodeFSK(const Data: array of word; Bits: Integer; var bin: TArray<Boolean>);

procedure CreateSuncro(Bits: Integer; var CurBit: Boolean; var bin: TArray<Boolean>);
function Decode(const Data: Integer; out Res: Integer): Boolean; overload;
//function Decode(const Data: TArray<Double>; Bits: Integer; out Corr: TArray<Double>; out Res: Integer): Boolean; overload;
function Encod(cod: Word): Word;
function FastCorr(A,B: Integer; n: integer): Integer;
function RMCodes: TArray<Cardinal>;

const
  FIBONACH_CODES: array [0..2583] of Word =($0,$1,$2,$4,$5,$8,$9,$A,$10,$11,$12,$14,$15,$20,$21,$22,$24,$25,$28,$29,$2A,$40,$41,$42,
$44,$45,$48,$49,$4A,$50,$51,$52,$54,$55,$80,$81,$82,$84,$85,$88,$89,$8A,$90,$91,$92,$94,$95,$A0,
$A1,$A2,$A4,$A5,$A8,$A9,$AA,$100,$101,$102,$104,$105,$108,$109,$10A,$110,$111,$112,$114,$115,$120,$121,$122,$124,
$125,$128,$129,$12A,$140,$141,$142,$144,$145,$148,$149,$14A,$150,$151,$152,$154,$155,$200,$201,$202,$204,$205,$208,$209,
$20A,$210,$211,$212,$214,$215,$220,$221,$222,$224,$225,$228,$229,$22A,$240,$241,$242,$244,$245,$248,$249,$24A,$250,$251,
$252,$254,$255,$280,$281,$282,$284,$285,$288,$289,$28A,$290,$291,$292,$294,$295,$2A0,$2A1,$2A2,$2A4,$2A5,$2A8,$2A9,$2AA,
$400,$401,$402,$404,$405,$408,$409,$40A,$410,$411,$412,$414,$415,$420,$421,$422,$424,$425,$428,$429,$42A,$440,$441,$442,
$444,$445,$448,$449,$44A,$450,$451,$452,$454,$455,$480,$481,$482,$484,$485,$488,$489,$48A,$490,$491,$492,$494,$495,$4A0,
$4A1,$4A2,$4A4,$4A5,$4A8,$4A9,$4AA,$500,$501,$502,$504,$505,$508,$509,$50A,$510,$511,$512,$514,$515,$520,$521,$522,$524,
$525,$528,$529,$52A,$540,$541,$542,$544,$545,$548,$549,$54A,$550,$551,$552,$554,$555,$800,$801,$802,$804,$805,$808,$809,
$80A,$810,$811,$812,$814,$815,$820,$821,$822,$824,$825,$828,$829,$82A,$840,$841,$842,$844,$845,$848,$849,$84A,$850,$851,
$852,$854,$855,$880,$881,$882,$884,$885,$888,$889,$88A,$890,$891,$892,$894,$895,$8A0,$8A1,$8A2,$8A4,$8A5,$8A8,$8A9,$8AA,
$900,$901,$902,$904,$905,$908,$909,$90A,$910,$911,$912,$914,$915,$920,$921,$922,$924,$925,$928,$929,$92A,$940,$941,$942,
$944,$945,$948,$949,$94A,$950,$951,$952,$954,$955,$A00,$A01,$A02,$A04,$A05,$A08,$A09,$A0A,$A10,$A11,$A12,$A14,$A15,$A20,
$A21,$A22,$A24,$A25,$A28,$A29,$A2A,$A40,$A41,$A42,$A44,$A45,$A48,$A49,$A4A,$A50,$A51,$A52,$A54,$A55,$A80,$A81,$A82,$A84,
$A85,$A88,$A89,$A8A,$A90,$A91,$A92,$A94,$A95,$AA0,$AA1,$AA2,$AA4,$AA5,$AA8,$AA9,$AAA,$1000,$1001,$1002,$1004,$1005,$1008,$1009,
$100A,$1010,$1011,$1012,$1014,$1015,$1020,$1021,$1022,$1024,$1025,$1028,$1029,$102A,$1040,$1041,$1042,$1044,$1045,$1048,$1049,$104A,$1050,$1051,
$1052,$1054,$1055,$1080,$1081,$1082,$1084,$1085,$1088,$1089,$108A,$1090,$1091,$1092,$1094,$1095,$10A0,$10A1,$10A2,$10A4,$10A5,$10A8,$10A9,$10AA,
$1100,$1101,$1102,$1104,$1105,$1108,$1109,$110A,$1110,$1111,$1112,$1114,$1115,$1120,$1121,$1122,$1124,$1125,$1128,$1129,$112A,$1140,$1141,$1142,
$1144,$1145,$1148,$1149,$114A,$1150,$1151,$1152,$1154,$1155,$1200,$1201,$1202,$1204,$1205,$1208,$1209,$120A,$1210,$1211,$1212,$1214,$1215,$1220,
$1221,$1222,$1224,$1225,$1228,$1229,$122A,$1240,$1241,$1242,$1244,$1245,$1248,$1249,$124A,$1250,$1251,$1252,$1254,$1255,$1280,$1281,$1282,$1284,
$1285,$1288,$1289,$128A,$1290,$1291,$1292,$1294,$1295,$12A0,$12A1,$12A2,$12A4,$12A5,$12A8,$12A9,$12AA,$1400,$1401,$1402,$1404,$1405,$1408,$1409,
$140A,$1410,$1411,$1412,$1414,$1415,$1420,$1421,$1422,$1424,$1425,$1428,$1429,$142A,$1440,$1441,$1442,$1444,$1445,$1448,$1449,$144A,$1450,$1451,
$1452,$1454,$1455,$1480,$1481,$1482,$1484,$1485,$1488,$1489,$148A,$1490,$1491,$1492,$1494,$1495,$14A0,$14A1,$14A2,$14A4,$14A5,$14A8,$14A9,$14AA,
$1500,$1501,$1502,$1504,$1505,$1508,$1509,$150A,$1510,$1511,$1512,$1514,$1515,$1520,$1521,$1522,$1524,$1525,$1528,$1529,$152A,$1540,$1541,$1542,
$1544,$1545,$1548,$1549,$154A,$1550,$1551,$1552,$1554,$1555,$2000,$2001,$2002,$2004,$2005,$2008,$2009,$200A,$2010,$2011,$2012,$2014,$2015,$2020,
$2021,$2022,$2024,$2025,$2028,$2029,$202A,$2040,$2041,$2042,$2044,$2045,$2048,$2049,$204A,$2050,$2051,$2052,$2054,$2055,$2080,$2081,$2082,$2084,
$2085,$2088,$2089,$208A,$2090,$2091,$2092,$2094,$2095,$20A0,$20A1,$20A2,$20A4,$20A5,$20A8,$20A9,$20AA,$2100,$2101,$2102,$2104,$2105,$2108,$2109,
$210A,$2110,$2111,$2112,$2114,$2115,$2120,$2121,$2122,$2124,$2125,$2128,$2129,$212A,$2140,$2141,$2142,$2144,$2145,$2148,$2149,$214A,$2150,$2151,
$2152,$2154,$2155,$2200,$2201,$2202,$2204,$2205,$2208,$2209,$220A,$2210,$2211,$2212,$2214,$2215,$2220,$2221,$2222,$2224,$2225,$2228,$2229,$222A,
$2240,$2241,$2242,$2244,$2245,$2248,$2249,$224A,$2250,$2251,$2252,$2254,$2255,$2280,$2281,$2282,$2284,$2285,$2288,$2289,$228A,$2290,$2291,$2292,
$2294,$2295,$22A0,$22A1,$22A2,$22A4,$22A5,$22A8,$22A9,$22AA,$2400,$2401,$2402,$2404,$2405,$2408,$2409,$240A,$2410,$2411,$2412,$2414,$2415,$2420,
$2421,$2422,$2424,$2425,$2428,$2429,$242A,$2440,$2441,$2442,$2444,$2445,$2448,$2449,$244A,$2450,$2451,$2452,$2454,$2455,$2480,$2481,$2482,$2484,
$2485,$2488,$2489,$248A,$2490,$2491,$2492,$2494,$2495,$24A0,$24A1,$24A2,$24A4,$24A5,$24A8,$24A9,$24AA,$2500,$2501,$2502,$2504,$2505,$2508,$2509,
$250A,$2510,$2511,$2512,$2514,$2515,$2520,$2521,$2522,$2524,$2525,$2528,$2529,$252A,$2540,$2541,$2542,$2544,$2545,$2548,$2549,$254A,$2550,$2551,
$2552,$2554,$2555,$2800,$2801,$2802,$2804,$2805,$2808,$2809,$280A,$2810,$2811,$2812,$2814,$2815,$2820,$2821,$2822,$2824,$2825,$2828,$2829,$282A,
$2840,$2841,$2842,$2844,$2845,$2848,$2849,$284A,$2850,$2851,$2852,$2854,$2855,$2880,$2881,$2882,$2884,$2885,$2888,$2889,$288A,$2890,$2891,$2892,
$2894,$2895,$28A0,$28A1,$28A2,$28A4,$28A5,$28A8,$28A9,$28AA,$2900,$2901,$2902,$2904,$2905,$2908,$2909,$290A,$2910,$2911,$2912,$2914,$2915,$2920,
$2921,$2922,$2924,$2925,$2928,$2929,$292A,$2940,$2941,$2942,$2944,$2945,$2948,$2949,$294A,$2950,$2951,$2952,$2954,$2955,$2A00,$2A01,$2A02,$2A04,
$2A05,$2A08,$2A09,$2A0A,$2A10,$2A11,$2A12,$2A14,$2A15,$2A20,$2A21,$2A22,$2A24,$2A25,$2A28,$2A29,$2A2A,$2A40,$2A41,$2A42,$2A44,$2A45,$2A48,$2A49,
$2A4A,$2A50,$2A51,$2A52,$2A54,$2A55,$2A80,$2A81,$2A82,$2A84,$2A85,$2A88,$2A89,$2A8A,$2A90,$2A91,$2A92,$2A94,$2A95,$2AA0,$2AA1,$2AA2,$2AA4,$2AA5,
$2AA8,$2AA9,$2AAA,$4000,$4001,$4002,$4004,$4005,$4008,$4009,$400A,$4010,$4011,$4012,$4014,$4015,$4020,$4021,$4022,$4024,$4025,$4028,$4029,$402A,
$4040,$4041,$4042,$4044,$4045,$4048,$4049,$404A,$4050,$4051,$4052,$4054,$4055,$4080,$4081,$4082,$4084,$4085,$4088,$4089,$408A,$4090,$4091,$4092,
$4094,$4095,$40A0,$40A1,$40A2,$40A4,$40A5,$40A8,$40A9,$40AA,$4100,$4101,$4102,$4104,$4105,$4108,$4109,$410A,$4110,$4111,$4112,$4114,$4115,$4120,
$4121,$4122,$4124,$4125,$4128,$4129,$412A,$4140,$4141,$4142,$4144,$4145,$4148,$4149,$414A,$4150,$4151,$4152,$4154,$4155,$4200,$4201,$4202,$4204,
$4205,$4208,$4209,$420A,$4210,$4211,$4212,$4214,$4215,$4220,$4221,$4222,$4224,$4225,$4228,$4229,$422A,$4240,$4241,$4242,$4244,$4245,$4248,$4249,
$424A,$4250,$4251,$4252,$4254,$4255,$4280,$4281,$4282,$4284,$4285,$4288,$4289,$428A,$4290,$4291,$4292,$4294,$4295,$42A0,$42A1,$42A2,$42A4,$42A5,
$42A8,$42A9,$42AA,$4400,$4401,$4402,$4404,$4405,$4408,$4409,$440A,$4410,$4411,$4412,$4414,$4415,$4420,$4421,$4422,$4424,$4425,$4428,$4429,$442A,
$4440,$4441,$4442,$4444,$4445,$4448,$4449,$444A,$4450,$4451,$4452,$4454,$4455,$4480,$4481,$4482,$4484,$4485,$4488,$4489,$448A,$4490,$4491,$4492,
$4494,$4495,$44A0,$44A1,$44A2,$44A4,$44A5,$44A8,$44A9,$44AA,$4500,$4501,$4502,$4504,$4505,$4508,$4509,$450A,$4510,$4511,$4512,$4514,$4515,$4520,
$4521,$4522,$4524,$4525,$4528,$4529,$452A,$4540,$4541,$4542,$4544,$4545,$4548,$4549,$454A,$4550,$4551,$4552,$4554,$4555,$4800,$4801,$4802,$4804,
$4805,$4808,$4809,$480A,$4810,$4811,$4812,$4814,$4815,$4820,$4821,$4822,$4824,$4825,$4828,$4829,$482A,$4840,$4841,$4842,$4844,$4845,$4848,$4849,
$484A,$4850,$4851,$4852,$4854,$4855,$4880,$4881,$4882,$4884,$4885,$4888,$4889,$488A,$4890,$4891,$4892,$4894,$4895,$48A0,$48A1,$48A2,$48A4,$48A5,
$48A8,$48A9,$48AA,$4900,$4901,$4902,$4904,$4905,$4908,$4909,$490A,$4910,$4911,$4912,$4914,$4915,$4920,$4921,$4922,$4924,$4925,$4928,$4929,$492A,
$4940,$4941,$4942,$4944,$4945,$4948,$4949,$494A,$4950,$4951,$4952,$4954,$4955,$4A00,$4A01,$4A02,$4A04,$4A05,$4A08,$4A09,$4A0A,$4A10,$4A11,$4A12,
$4A14,$4A15,$4A20,$4A21,$4A22,$4A24,$4A25,$4A28,$4A29,$4A2A,$4A40,$4A41,$4A42,$4A44,$4A45,$4A48,$4A49,$4A4A,$4A50,$4A51,$4A52,$4A54,$4A55,$4A80,
$4A81,$4A82,$4A84,$4A85,$4A88,$4A89,$4A8A,$4A90,$4A91,$4A92,$4A94,$4A95,$4AA0,$4AA1,$4AA2,$4AA4,$4AA5,$4AA8,$4AA9,$4AAA,$5000,$5001,$5002,$5004,
$5005,$5008,$5009,$500A,$5010,$5011,$5012,$5014,$5015,$5020,$5021,$5022,$5024,$5025,$5028,$5029,$502A,$5040,$5041,$5042,$5044,$5045,$5048,$5049,
$504A,$5050,$5051,$5052,$5054,$5055,$5080,$5081,$5082,$5084,$5085,$5088,$5089,$508A,$5090,$5091,$5092,$5094,$5095,$50A0,$50A1,$50A2,$50A4,$50A5,
$50A8,$50A9,$50AA,$5100,$5101,$5102,$5104,$5105,$5108,$5109,$510A,$5110,$5111,$5112,$5114,$5115,$5120,$5121,$5122,$5124,$5125,$5128,$5129,$512A,
$5140,$5141,$5142,$5144,$5145,$5148,$5149,$514A,$5150,$5151,$5152,$5154,$5155,$5200,$5201,$5202,$5204,$5205,$5208,$5209,$520A,$5210,$5211,$5212,
$5214,$5215,$5220,$5221,$5222,$5224,$5225,$5228,$5229,$522A,$5240,$5241,$5242,$5244,$5245,$5248,$5249,$524A,$5250,$5251,$5252,$5254,$5255,$5280,
$5281,$5282,$5284,$5285,$5288,$5289,$528A,$5290,$5291,$5292,$5294,$5295,$52A0,$52A1,$52A2,$52A4,$52A5,$52A8,$52A9,$52AA,$5400,$5401,$5402,$5404,
$5405,$5408,$5409,$540A,$5410,$5411,$5412,$5414,$5415,$5420,$5421,$5422,$5424,$5425,$5428,$5429,$542A,$5440,$5441,$5442,$5444,$5445,$5448,$5449,
$544A,$5450,$5451,$5452,$5454,$5455,$5480,$5481,$5482,$5484,$5485,$5488,$5489,$548A,$5490,$5491,$5492,$5494,$5495,$54A0,$54A1,$54A2,$54A4,$54A5,
$54A8,$54A9,$54AA,$5500,$5501,$5502,$5504,$5505,$5508,$5509,$550A,$5510,$5511,$5512,$5514,$5515,$5520,$5521,$5522,$5524,$5525,$5528,$5529,$552A,
$5540,$5541,$5542,$5544,$5545,$5548,$5549,$554A,$5550,$5551,$5552,$5554,$5555,$8000,$8001,$8002,$8004,$8005,$8008,$8009,$800A,$8010,$8011,$8012,
$8014,$8015,$8020,$8021,$8022,$8024,$8025,$8028,$8029,$802A,$8040,$8041,$8042,$8044,$8045,$8048,$8049,$804A,$8050,$8051,$8052,$8054,$8055,$8080,
$8081,$8082,$8084,$8085,$8088,$8089,$808A,$8090,$8091,$8092,$8094,$8095,$80A0,$80A1,$80A2,$80A4,$80A5,$80A8,$80A9,$80AA,$8100,$8101,$8102,$8104,
$8105,$8108,$8109,$810A,$8110,$8111,$8112,$8114,$8115,$8120,$8121,$8122,$8124,$8125,$8128,$8129,$812A,$8140,$8141,$8142,$8144,$8145,$8148,$8149,
$814A,$8150,$8151,$8152,$8154,$8155,$8200,$8201,$8202,$8204,$8205,$8208,$8209,$820A,$8210,$8211,$8212,$8214,$8215,$8220,$8221,$8222,$8224,$8225,
$8228,$8229,$822A,$8240,$8241,$8242,$8244,$8245,$8248,$8249,$824A,$8250,$8251,$8252,$8254,$8255,$8280,$8281,$8282,$8284,$8285,$8288,$8289,$828A,
$8290,$8291,$8292,$8294,$8295,$82A0,$82A1,$82A2,$82A4,$82A5,$82A8,$82A9,$82AA,$8400,$8401,$8402,$8404,$8405,$8408,$8409,$840A,$8410,$8411,$8412,
$8414,$8415,$8420,$8421,$8422,$8424,$8425,$8428,$8429,$842A,$8440,$8441,$8442,$8444,$8445,$8448,$8449,$844A,$8450,$8451,$8452,$8454,$8455,$8480,
$8481,$8482,$8484,$8485,$8488,$8489,$848A,$8490,$8491,$8492,$8494,$8495,$84A0,$84A1,$84A2,$84A4,$84A5,$84A8,$84A9,$84AA,$8500,$8501,$8502,$8504,
$8505,$8508,$8509,$850A,$8510,$8511,$8512,$8514,$8515,$8520,$8521,$8522,$8524,$8525,$8528,$8529,$852A,$8540,$8541,$8542,$8544,$8545,$8548,$8549,
$854A,$8550,$8551,$8552,$8554,$8555,$8800,$8801,$8802,$8804,$8805,$8808,$8809,$880A,$8810,$8811,$8812,$8814,$8815,$8820,$8821,$8822,$8824,$8825,
$8828,$8829,$882A,$8840,$8841,$8842,$8844,$8845,$8848,$8849,$884A,$8850,$8851,$8852,$8854,$8855,$8880,$8881,$8882,$8884,$8885,$8888,$8889,$888A,
$8890,$8891,$8892,$8894,$8895,$88A0,$88A1,$88A2,$88A4,$88A5,$88A8,$88A9,$88AA,$8900,$8901,$8902,$8904,$8905,$8908,$8909,$890A,$8910,$8911,$8912,
$8914,$8915,$8920,$8921,$8922,$8924,$8925,$8928,$8929,$892A,$8940,$8941,$8942,$8944,$8945,$8948,$8949,$894A,$8950,$8951,$8952,$8954,$8955,$8A00,
$8A01,$8A02,$8A04,$8A05,$8A08,$8A09,$8A0A,$8A10,$8A11,$8A12,$8A14,$8A15,$8A20,$8A21,$8A22,$8A24,$8A25,$8A28,$8A29,$8A2A,$8A40,$8A41,$8A42,$8A44,
$8A45,$8A48,$8A49,$8A4A,$8A50,$8A51,$8A52,$8A54,$8A55,$8A80,$8A81,$8A82,$8A84,$8A85,$8A88,$8A89,$8A8A,$8A90,$8A91,$8A92,$8A94,$8A95,$8AA0,$8AA1,
$8AA2,$8AA4,$8AA5,$8AA8,$8AA9,$8AAA,$9000,$9001,$9002,$9004,$9005,$9008,$9009,$900A,$9010,$9011,$9012,$9014,$9015,$9020,$9021,$9022,$9024,$9025,
$9028,$9029,$902A,$9040,$9041,$9042,$9044,$9045,$9048,$9049,$904A,$9050,$9051,$9052,$9054,$9055,$9080,$9081,$9082,$9084,$9085,$9088,$9089,$908A,
$9090,$9091,$9092,$9094,$9095,$90A0,$90A1,$90A2,$90A4,$90A5,$90A8,$90A9,$90AA,$9100,$9101,$9102,$9104,$9105,$9108,$9109,$910A,$9110,$9111,$9112,
$9114,$9115,$9120,$9121,$9122,$9124,$9125,$9128,$9129,$912A,$9140,$9141,$9142,$9144,$9145,$9148,$9149,$914A,$9150,$9151,$9152,$9154,$9155,$9200,
$9201,$9202,$9204,$9205,$9208,$9209,$920A,$9210,$9211,$9212,$9214,$9215,$9220,$9221,$9222,$9224,$9225,$9228,$9229,$922A,$9240,$9241,$9242,$9244,
$9245,$9248,$9249,$924A,$9250,$9251,$9252,$9254,$9255,$9280,$9281,$9282,$9284,$9285,$9288,$9289,$928A,$9290,$9291,$9292,$9294,$9295,$92A0,$92A1,
$92A2,$92A4,$92A5,$92A8,$92A9,$92AA,$9400,$9401,$9402,$9404,$9405,$9408,$9409,$940A,$9410,$9411,$9412,$9414,$9415,$9420,$9421,$9422,$9424,$9425,
$9428,$9429,$942A,$9440,$9441,$9442,$9444,$9445,$9448,$9449,$944A,$9450,$9451,$9452,$9454,$9455,$9480,$9481,$9482,$9484,$9485,$9488,$9489,$948A,
$9490,$9491,$9492,$9494,$9495,$94A0,$94A1,$94A2,$94A4,$94A5,$94A8,$94A9,$94AA,$9500,$9501,$9502,$9504,$9505,$9508,$9509,$950A,$9510,$9511,$9512,
$9514,$9515,$9520,$9521,$9522,$9524,$9525,$9528,$9529,$952A,$9540,$9541,$9542,$9544,$9545,$9548,$9549,$954A,$9550,$9551,$9552,$9554,$9555,$A000,
$A001,$A002,$A004,$A005,$A008,$A009,$A00A,$A010,$A011,$A012,$A014,$A015,$A020,$A021,$A022,$A024,$A025,$A028,$A029,$A02A,$A040,$A041,$A042,$A044,
$A045,$A048,$A049,$A04A,$A050,$A051,$A052,$A054,$A055,$A080,$A081,$A082,$A084,$A085,$A088,$A089,$A08A,$A090,$A091,$A092,$A094,$A095,$A0A0,$A0A1,
$A0A2,$A0A4,$A0A5,$A0A8,$A0A9,$A0AA,$A100,$A101,$A102,$A104,$A105,$A108,$A109,$A10A,$A110,$A111,$A112,$A114,$A115,$A120,$A121,$A122,$A124,$A125,
$A128,$A129,$A12A,$A140,$A141,$A142,$A144,$A145,$A148,$A149,$A14A,$A150,$A151,$A152,$A154,$A155,$A200,$A201,$A202,$A204,$A205,$A208,$A209,$A20A,
$A210,$A211,$A212,$A214,$A215,$A220,$A221,$A222,$A224,$A225,$A228,$A229,$A22A,$A240,$A241,$A242,$A244,$A245,$A248,$A249,$A24A,$A250,$A251,$A252,
$A254,$A255,$A280,$A281,$A282,$A284,$A285,$A288,$A289,$A28A,$A290,$A291,$A292,$A294,$A295,$A2A0,$A2A1,$A2A2,$A2A4,$A2A5,$A2A8,$A2A9,$A2AA,$A400,
$A401,$A402,$A404,$A405,$A408,$A409,$A40A,$A410,$A411,$A412,$A414,$A415,$A420,$A421,$A422,$A424,$A425,$A428,$A429,$A42A,$A440,$A441,$A442,$A444,
$A445,$A448,$A449,$A44A,$A450,$A451,$A452,$A454,$A455,$A480,$A481,$A482,$A484,$A485,$A488,$A489,$A48A,$A490,$A491,$A492,$A494,$A495,$A4A0,$A4A1,
$A4A2,$A4A4,$A4A5,$A4A8,$A4A9,$A4AA,$A500,$A501,$A502,$A504,$A505,$A508,$A509,$A50A,$A510,$A511,$A512,$A514,$A515,$A520,$A521,$A522,$A524,$A525,
$A528,$A529,$A52A,$A540,$A541,$A542,$A544,$A545,$A548,$A549,$A54A,$A550,$A551,$A552,$A554,$A555,$A800,$A801,$A802,$A804,$A805,$A808,$A809,$A80A,
$A810,$A811,$A812,$A814,$A815,$A820,$A821,$A822,$A824,$A825,$A828,$A829,$A82A,$A840,$A841,$A842,$A844,$A845,$A848,$A849,$A84A,$A850,$A851,$A852,
$A854,$A855,$A880,$A881,$A882,$A884,$A885,$A888,$A889,$A88A,$A890,$A891,$A892,$A894,$A895,$A8A0,$A8A1,$A8A2,$A8A4,$A8A5,$A8A8,$A8A9,$A8AA,$A900,
$A901,$A902,$A904,$A905,$A908,$A909,$A90A,$A910,$A911,$A912,$A914,$A915,$A920,$A921,$A922,$A924,$A925,$A928,$A929,$A92A,$A940,$A941,$A942,$A944,
$A945,$A948,$A949,$A94A,$A950,$A951,$A952,$A954,$A955,$AA00,$AA01,$AA02,$AA04,$AA05,$AA08,$AA09,$AA0A,$AA10,$AA11,$AA12,$AA14,$AA15,$AA20,$AA21,
$AA22,$AA24,$AA25,$AA28,$AA29,$AA2A,$AA40,$AA41,$AA42,$AA44,$AA45,$AA48,$AA49,$AA4A,$AA50,$AA51,$AA52,$AA54,$AA55,$AA80,$AA81,$AA82,$AA84,$AA85,
$AA88,$AA89,$AA8A,$AA90,$AA91,$AA92,$AA94,$AA95,$AAA0,$AAA1,$AAA2,$AAA4,$AAA5,$AAA8,$AAA9,$AAAA);


FIBONACH_ENCODED_PSK: array [0..2583] of Word =(
$AAAA,$AAAB,$AAA9,$AAAD,$AAAC,$AAA5,$AAA4,$AAA6,$AAB5,$AAB4,$AAB6,$AAB2,$AAB3,$AA95,$AA94,$AA96,$AA92,$AA93,$AA9A,$AA9B,$AA99,$AAD5,$AAD4,$AAD6,$AAD2,
$AAD3,$AADA,$AADB,$AAD9,$AACA,$AACB,$AAC9,$AACD,$AACC,$AA55,$AA54,$AA56,$AA52,$AA53,$AA5A,$AA5B,$AA59,$AA4A,$AA4B,$AA49,$AA4D,$AA4C,$AA6A,$AA6B,$AA69,
$AA6D,$AA6C,$AA65,$AA64,$AA66,$AB55,$AB54,$AB56,$AB52,$AB53,$AB5A,$AB5B,$AB59,$AB4A,$AB4B,$AB49,$AB4D,$AB4C,$AB6A,$AB6B,$AB69,$AB6D,$AB6C,$AB65,$AB64,
$AB66,$AB2A,$AB2B,$AB29,$AB2D,$AB2C,$AB25,$AB24,$AB26,$AB35,$AB34,$AB36,$AB32,$AB33,$A955,$A954,$A956,$A952,$A953,$A95A,$A95B,$A959,$A94A,$A94B,$A949,
$A94D,$A94C,$A96A,$A96B,$A969,$A96D,$A96C,$A965,$A964,$A966,$A92A,$A92B,$A929,$A92D,$A92C,$A925,$A924,$A926,$A935,$A934,$A936,$A932,$A933,$A9AA,$A9AB,
$A9A9,$A9AD,$A9AC,$A9A5,$A9A4,$A9A6,$A9B5,$A9B4,$A9B6,$A9B2,$A9B3,$A995,$A994,$A996,$A992,$A993,$A99A,$A99B,$A999,$AD55,$AD54,$AD56,$AD52,$AD53,$AD5A,
$AD5B,$AD59,$AD4A,$AD4B,$AD49,$AD4D,$AD4C,$AD6A,$AD6B,$AD69,$AD6D,$AD6C,$AD65,$AD64,$AD66,$AD2A,$AD2B,$AD29,$AD2D,$AD2C,$AD25,$AD24,$AD26,$AD35,$AD34,
$AD36,$AD32,$AD33,$ADAA,$ADAB,$ADA9,$ADAD,$ADAC,$ADA5,$ADA4,$ADA6,$ADB5,$ADB4,$ADB6,$ADB2,$ADB3,$AD95,$AD94,$AD96,$AD92,$AD93,$AD9A,$AD9B,$AD99,$ACAA,
$ACAB,$ACA9,$ACAD,$ACAC,$ACA5,$ACA4,$ACA6,$ACB5,$ACB4,$ACB6,$ACB2,$ACB3,$AC95,$AC94,$AC96,$AC92,$AC93,$AC9A,$AC9B,$AC99,$ACD5,$ACD4,$ACD6,$ACD2,$ACD3,
$ACDA,$ACDB,$ACD9,$ACCA,$ACCB,$ACC9,$ACCD,$ACCC,$A555,$A554,$A556,$A552,$A553,$A55A,$A55B,$A559,$A54A,$A54B,$A549,$A54D,$A54C,$A56A,$A56B,$A569,$A56D,
$A56C,$A565,$A564,$A566,$A52A,$A52B,$A529,$A52D,$A52C,$A525,$A524,$A526,$A535,$A534,$A536,$A532,$A533,$A5AA,$A5AB,$A5A9,$A5AD,$A5AC,$A5A5,$A5A4,$A5A6,
$A5B5,$A5B4,$A5B6,$A5B2,$A5B3,$A595,$A594,$A596,$A592,$A593,$A59A,$A59B,$A599,$A4AA,$A4AB,$A4A9,$A4AD,$A4AC,$A4A5,$A4A4,$A4A6,$A4B5,$A4B4,$A4B6,$A4B2,
$A4B3,$A495,$A494,$A496,$A492,$A493,$A49A,$A49B,$A499,$A4D5,$A4D4,$A4D6,$A4D2,$A4D3,$A4DA,$A4DB,$A4D9,$A4CA,$A4CB,$A4C9,$A4CD,$A4CC,$A6AA,$A6AB,$A6A9,
$A6AD,$A6AC,$A6A5,$A6A4,$A6A6,$A6B5,$A6B4,$A6B6,$A6B2,$A6B3,$A695,$A694,$A696,$A692,$A693,$A69A,$A69B,$A699,$A6D5,$A6D4,$A6D6,$A6D2,$A6D3,$A6DA,$A6DB,
$A6D9,$A6CA,$A6CB,$A6C9,$A6CD,$A6CC,$A655,$A654,$A656,$A652,$A653,$A65A,$A65B,$A659,$A64A,$A64B,$A649,$A64D,$A64C,$A66A,$A66B,$A669,$A66D,$A66C,$A665,
$A664,$A666,$B555,$B554,$B556,$B552,$B553,$B55A,$B55B,$B559,$B54A,$B54B,$B549,$B54D,$B54C,$B56A,$B56B,$B569,$B56D,$B56C,$B565,$B564,$B566,$B52A,$B52B,
$B529,$B52D,$B52C,$B525,$B524,$B526,$B535,$B534,$B536,$B532,$B533,$B5AA,$B5AB,$B5A9,$B5AD,$B5AC,$B5A5,$B5A4,$B5A6,$B5B5,$B5B4,$B5B6,$B5B2,$B5B3,$B595,
$B594,$B596,$B592,$B593,$B59A,$B59B,$B599,$B4AA,$B4AB,$B4A9,$B4AD,$B4AC,$B4A5,$B4A4,$B4A6,$B4B5,$B4B4,$B4B6,$B4B2,$B4B3,$B495,$B494,$B496,$B492,$B493,
$B49A,$B49B,$B499,$B4D5,$B4D4,$B4D6,$B4D2,$B4D3,$B4DA,$B4DB,$B4D9,$B4CA,$B4CB,$B4C9,$B4CD,$B4CC,$B6AA,$B6AB,$B6A9,$B6AD,$B6AC,$B6A5,$B6A4,$B6A6,$B6B5,
$B6B4,$B6B6,$B6B2,$B6B3,$B695,$B694,$B696,$B692,$B693,$B69A,$B69B,$B699,$B6D5,$B6D4,$B6D6,$B6D2,$B6D3,$B6DA,$B6DB,$B6D9,$B6CA,$B6CB,$B6C9,$B6CD,$B6CC,
$B655,$B654,$B656,$B652,$B653,$B65A,$B65B,$B659,$B64A,$B64B,$B649,$B64D,$B64C,$B66A,$B66B,$B669,$B66D,$B66C,$B665,$B664,$B666,$B2AA,$B2AB,$B2A9,$B2AD,
$B2AC,$B2A5,$B2A4,$B2A6,$B2B5,$B2B4,$B2B6,$B2B2,$B2B3,$B295,$B294,$B296,$B292,$B293,$B29A,$B29B,$B299,$B2D5,$B2D4,$B2D6,$B2D2,$B2D3,$B2DA,$B2DB,$B2D9,
$B2CA,$B2CB,$B2C9,$B2CD,$B2CC,$B255,$B254,$B256,$B252,$B253,$B25A,$B25B,$B259,$B24A,$B24B,$B249,$B24D,$B24C,$B26A,$B26B,$B269,$B26D,$B26C,$B265,$B264,
$B266,$B355,$B354,$B356,$B352,$B353,$B35A,$B35B,$B359,$B34A,$B34B,$B349,$B34D,$B34C,$B36A,$B36B,$B369,$B36D,$B36C,$B365,$B364,$B366,$B32A,$B32B,$B329,
$B32D,$B32C,$B325,$B324,$B326,$B335,$B334,$B336,$B332,$B333,$9555,$9554,$9556,$9552,$9553,$955A,$955B,$9559,$954A,$954B,$9549,$954D,$954C,$956A,$956B,
$9569,$956D,$956C,$9565,$9564,$9566,$952A,$952B,$9529,$952D,$952C,$9525,$9524,$9526,$9535,$9534,$9536,$9532,$9533,$95AA,$95AB,$95A9,$95AD,$95AC,$95A5,
$95A4,$95A6,$95B5,$95B4,$95B6,$95B2,$95B3,$9595,$9594,$9596,$9592,$9593,$959A,$959B,$9599,$94AA,$94AB,$94A9,$94AD,$94AC,$94A5,$94A4,$94A6,$94B5,$94B4,
$94B6,$94B2,$94B3,$9495,$9494,$9496,$9492,$9493,$949A,$949B,$9499,$94D5,$94D4,$94D6,$94D2,$94D3,$94DA,$94DB,$94D9,$94CA,$94CB,$94C9,$94CD,$94CC,$96AA,
$96AB,$96A9,$96AD,$96AC,$96A5,$96A4,$96A6,$96B5,$96B4,$96B6,$96B2,$96B3,$9695,$9694,$9696,$9692,$9693,$969A,$969B,$9699,$96D5,$96D4,$96D6,$96D2,$96D3,
$96DA,$96DB,$96D9,$96CA,$96CB,$96C9,$96CD,$96CC,$9655,$9654,$9656,$9652,$9653,$965A,$965B,$9659,$964A,$964B,$9649,$964D,$964C,$966A,$966B,$9669,$966D,
$966C,$9665,$9664,$9666,$92AA,$92AB,$92A9,$92AD,$92AC,$92A5,$92A4,$92A6,$92B5,$92B4,$92B6,$92B2,$92B3,$9295,$9294,$9296,$9292,$9293,$929A,$929B,$9299,
$92D5,$92D4,$92D6,$92D2,$92D3,$92DA,$92DB,$92D9,$92CA,$92CB,$92C9,$92CD,$92CC,$9255,$9254,$9256,$9252,$9253,$925A,$925B,$9259,$924A,$924B,$9249,$924D,
$924C,$926A,$926B,$9269,$926D,$926C,$9265,$9264,$9266,$9355,$9354,$9356,$9352,$9353,$935A,$935B,$9359,$934A,$934B,$9349,$934D,$934C,$936A,$936B,$9369,
$936D,$936C,$9365,$9364,$9366,$932A,$932B,$9329,$932D,$932C,$9325,$9324,$9326,$9335,$9334,$9336,$9332,$9333,$9AAA,$9AAB,$9AA9,$9AAD,$9AAC,$9AA5,$9AA4,
$9AA6,$9AB5,$9AB4,$9AB6,$9AB2,$9AB3,$9A95,$9A94,$9A96,$9A92,$9A93,$9A9A,$9A9B,$9A99,$9AD5,$9AD4,$9AD6,$9AD2,$9AD3,$9ADA,$9ADB,$9AD9,$9ACA,$9ACB,$9AC9,
$9ACD,$9ACC,$9A55,$9A54,$9A56,$9A52,$9A53,$9A5A,$9A5B,$9A59,$9A4A,$9A4B,$9A49,$9A4D,$9A4C,$9A6A,$9A6B,$9A69,$9A6D,$9A6C,$9A65,$9A64,$9A66,$9B55,$9B54,
$9B56,$9B52,$9B53,$9B5A,$9B5B,$9B59,$9B4A,$9B4B,$9B49,$9B4D,$9B4C,$9B6A,$9B6B,$9B69,$9B6D,$9B6C,$9B65,$9B64,$9B66,$9B2A,$9B2B,$9B29,$9B2D,$9B2C,$9B25,
$9B24,$9B26,$9B35,$9B34,$9B36,$9B32,$9B33,$9955,$9954,$9956,$9952,$9953,$995A,$995B,$9959,$994A,$994B,$9949,$994D,$994C,$996A,$996B,$9969,$996D,$996C,
$9965,$9964,$9966,$992A,$992B,$9929,$992D,$992C,$9925,$9924,$9926,$9935,$9934,$9936,$9932,$9933,$99AA,$99AB,$99A9,$99AD,$99AC,$99A5,$99A4,$99A6,$99B5,
$99B4,$99B6,$99B2,$99B3,$9995,$9994,$9996,$9992,$9993,$999A,$999B,$9999,$D555,$D554,$D556,$D552,$D553,$D55A,$D55B,$D559,$D54A,$D54B,$D549,$D54D,$D54C,
$D56A,$D56B,$D569,$D56D,$D56C,$D565,$D564,$D566,$D52A,$D52B,$D529,$D52D,$D52C,$D525,$D524,$D526,$D535,$D534,$D536,$D532,$D533,$D5AA,$D5AB,$D5A9,$D5AD,
$D5AC,$D5A5,$D5A4,$D5A6,$D5B5,$D5B4,$D5B6,$D5B2,$D5B3,$D595,$D594,$D596,$D592,$D593,$D59A,$D59B,$D599,$D4AA,$D4AB,$D4A9,$D4AD,$D4AC,$D4A5,$D4A4,$D4A6,
$D4B5,$D4B4,$D4B6,$D4B2,$D4B3,$D495,$D494,$D496,$D492,$D493,$D49A,$D49B,$D499,$D4D5,$D4D4,$D4D6,$D4D2,$D4D3,$D4DA,$D4DB,$D4D9,$D4CA,$D4CB,$D4C9,$D4CD,
$D4CC,$D6AA,$D6AB,$D6A9,$D6AD,$D6AC,$D6A5,$D6A4,$D6A6,$D6B5,$D6B4,$D6B6,$D6B2,$D6B3,$D695,$D694,$D696,$D692,$D693,$D69A,$D69B,$D699,$D6D5,$D6D4,$D6D6,
$D6D2,$D6D3,$D6DA,$D6DB,$D6D9,$D6CA,$D6CB,$D6C9,$D6CD,$D6CC,$D655,$D654,$D656,$D652,$D653,$D65A,$D65B,$D659,$D64A,$D64B,$D649,$D64D,$D64C,$D66A,$D66B,
$D669,$D66D,$D66C,$D665,$D664,$D666,$D2AA,$D2AB,$D2A9,$D2AD,$D2AC,$D2A5,$D2A4,$D2A6,$D2B5,$D2B4,$D2B6,$D2B2,$D2B3,$D295,$D294,$D296,$D292,$D293,$D29A,
$D29B,$D299,$D2D5,$D2D4,$D2D6,$D2D2,$D2D3,$D2DA,$D2DB,$D2D9,$D2CA,$D2CB,$D2C9,$D2CD,$D2CC,$D255,$D254,$D256,$D252,$D253,$D25A,$D25B,$D259,$D24A,$D24B,
$D249,$D24D,$D24C,$D26A,$D26B,$D269,$D26D,$D26C,$D265,$D264,$D266,$D355,$D354,$D356,$D352,$D353,$D35A,$D35B,$D359,$D34A,$D34B,$D349,$D34D,$D34C,$D36A,
$D36B,$D369,$D36D,$D36C,$D365,$D364,$D366,$D32A,$D32B,$D329,$D32D,$D32C,$D325,$D324,$D326,$D335,$D334,$D336,$D332,$D333,$DAAA,$DAAB,$DAA9,$DAAD,$DAAC,
$DAA5,$DAA4,$DAA6,$DAB5,$DAB4,$DAB6,$DAB2,$DAB3,$DA95,$DA94,$DA96,$DA92,$DA93,$DA9A,$DA9B,$DA99,$DAD5,$DAD4,$DAD6,$DAD2,$DAD3,$DADA,$DADB,$DAD9,$DACA,
$DACB,$DAC9,$DACD,$DACC,$DA55,$DA54,$DA56,$DA52,$DA53,$DA5A,$DA5B,$DA59,$DA4A,$DA4B,$DA49,$DA4D,$DA4C,$DA6A,$DA6B,$DA69,$DA6D,$DA6C,$DA65,$DA64,$DA66,
$DB55,$DB54,$DB56,$DB52,$DB53,$DB5A,$DB5B,$DB59,$DB4A,$DB4B,$DB49,$DB4D,$DB4C,$DB6A,$DB6B,$DB69,$DB6D,$DB6C,$DB65,$DB64,$DB66,$DB2A,$DB2B,$DB29,$DB2D,
$DB2C,$DB25,$DB24,$DB26,$DB35,$DB34,$DB36,$DB32,$DB33,$D955,$D954,$D956,$D952,$D953,$D95A,$D95B,$D959,$D94A,$D94B,$D949,$D94D,$D94C,$D96A,$D96B,$D969,
$D96D,$D96C,$D965,$D964,$D966,$D92A,$D92B,$D929,$D92D,$D92C,$D925,$D924,$D926,$D935,$D934,$D936,$D932,$D933,$D9AA,$D9AB,$D9A9,$D9AD,$D9AC,$D9A5,$D9A4,
$D9A6,$D9B5,$D9B4,$D9B6,$D9B2,$D9B3,$D995,$D994,$D996,$D992,$D993,$D99A,$D99B,$D999,$CAAA,$CAAB,$CAA9,$CAAD,$CAAC,$CAA5,$CAA4,$CAA6,$CAB5,$CAB4,$CAB6,
$CAB2,$CAB3,$CA95,$CA94,$CA96,$CA92,$CA93,$CA9A,$CA9B,$CA99,$CAD5,$CAD4,$CAD6,$CAD2,$CAD3,$CADA,$CADB,$CAD9,$CACA,$CACB,$CAC9,$CACD,$CACC,$CA55,$CA54,
$CA56,$CA52,$CA53,$CA5A,$CA5B,$CA59,$CA4A,$CA4B,$CA49,$CA4D,$CA4C,$CA6A,$CA6B,$CA69,$CA6D,$CA6C,$CA65,$CA64,$CA66,$CB55,$CB54,$CB56,$CB52,$CB53,$CB5A,
$CB5B,$CB59,$CB4A,$CB4B,$CB49,$CB4D,$CB4C,$CB6A,$CB6B,$CB69,$CB6D,$CB6C,$CB65,$CB64,$CB66,$CB2A,$CB2B,$CB29,$CB2D,$CB2C,$CB25,$CB24,$CB26,$CB35,$CB34,
$CB36,$CB32,$CB33,$C955,$C954,$C956,$C952,$C953,$C95A,$C95B,$C959,$C94A,$C94B,$C949,$C94D,$C94C,$C96A,$C96B,$C969,$C96D,$C96C,$C965,$C964,$C966,$C92A,
$C92B,$C929,$C92D,$C92C,$C925,$C924,$C926,$C935,$C934,$C936,$C932,$C933,$C9AA,$C9AB,$C9A9,$C9AD,$C9AC,$C9A5,$C9A4,$C9A6,$C9B5,$C9B4,$C9B6,$C9B2,$C9B3,
$C995,$C994,$C996,$C992,$C993,$C99A,$C99B,$C999,$CD55,$CD54,$CD56,$CD52,$CD53,$CD5A,$CD5B,$CD59,$CD4A,$CD4B,$CD49,$CD4D,$CD4C,$CD6A,$CD6B,$CD69,$CD6D,
$CD6C,$CD65,$CD64,$CD66,$CD2A,$CD2B,$CD29,$CD2D,$CD2C,$CD25,$CD24,$CD26,$CD35,$CD34,$CD36,$CD32,$CD33,$CDAA,$CDAB,$CDA9,$CDAD,$CDAC,$CDA5,$CDA4,$CDA6,
$CDB5,$CDB4,$CDB6,$CDB2,$CDB3,$CD95,$CD94,$CD96,$CD92,$CD93,$CD9A,$CD9B,$CD99,$CCAA,$CCAB,$CCA9,$CCAD,$CCAC,$CCA5,$CCA4,$CCA6,$CCB5,$CCB4,$CCB6,$CCB2,
$CCB3,$CC95,$CC94,$CC96,$CC92,$CC93,$CC9A,$CC9B,$CC99,$CCD5,$CCD4,$CCD6,$CCD2,$CCD3,$CCDA,$CCDB,$CCD9,$CCCA,$CCCB,$CCC9,$CCCD,$CCCC,$5555,$5554,$5556,
$5552,$5553,$555A,$555B,$5559,$554A,$554B,$5549,$554D,$554C,$556A,$556B,$5569,$556D,$556C,$5565,$5564,$5566,$552A,$552B,$5529,$552D,$552C,$5525,$5524,
$5526,$5535,$5534,$5536,$5532,$5533,$55AA,$55AB,$55A9,$55AD,$55AC,$55A5,$55A4,$55A6,$55B5,$55B4,$55B6,$55B2,$55B3,$5595,$5594,$5596,$5592,$5593,$559A,
$559B,$5599,$54AA,$54AB,$54A9,$54AD,$54AC,$54A5,$54A4,$54A6,$54B5,$54B4,$54B6,$54B2,$54B3,$5495,$5494,$5496,$5492,$5493,$549A,$549B,$5499,$54D5,$54D4,
$54D6,$54D2,$54D3,$54DA,$54DB,$54D9,$54CA,$54CB,$54C9,$54CD,$54CC,$56AA,$56AB,$56A9,$56AD,$56AC,$56A5,$56A4,$56A6,$56B5,$56B4,$56B6,$56B2,$56B3,$5695,
$5694,$5696,$5692,$5693,$569A,$569B,$5699,$56D5,$56D4,$56D6,$56D2,$56D3,$56DA,$56DB,$56D9,$56CA,$56CB,$56C9,$56CD,$56CC,$5655,$5654,$5656,$5652,$5653,
$565A,$565B,$5659,$564A,$564B,$5649,$564D,$564C,$566A,$566B,$5669,$566D,$566C,$5665,$5664,$5666,$52AA,$52AB,$52A9,$52AD,$52AC,$52A5,$52A4,$52A6,$52B5,
$52B4,$52B6,$52B2,$52B3,$5295,$5294,$5296,$5292,$5293,$529A,$529B,$5299,$52D5,$52D4,$52D6,$52D2,$52D3,$52DA,$52DB,$52D9,$52CA,$52CB,$52C9,$52CD,$52CC,
$5255,$5254,$5256,$5252,$5253,$525A,$525B,$5259,$524A,$524B,$5249,$524D,$524C,$526A,$526B,$5269,$526D,$526C,$5265,$5264,$5266,$5355,$5354,$5356,$5352,
$5353,$535A,$535B,$5359,$534A,$534B,$5349,$534D,$534C,$536A,$536B,$5369,$536D,$536C,$5365,$5364,$5366,$532A,$532B,$5329,$532D,$532C,$5325,$5324,$5326,
$5335,$5334,$5336,$5332,$5333,$5AAA,$5AAB,$5AA9,$5AAD,$5AAC,$5AA5,$5AA4,$5AA6,$5AB5,$5AB4,$5AB6,$5AB2,$5AB3,$5A95,$5A94,$5A96,$5A92,$5A93,$5A9A,$5A9B,
$5A99,$5AD5,$5AD4,$5AD6,$5AD2,$5AD3,$5ADA,$5ADB,$5AD9,$5ACA,$5ACB,$5AC9,$5ACD,$5ACC,$5A55,$5A54,$5A56,$5A52,$5A53,$5A5A,$5A5B,$5A59,$5A4A,$5A4B,$5A49,
$5A4D,$5A4C,$5A6A,$5A6B,$5A69,$5A6D,$5A6C,$5A65,$5A64,$5A66,$5B55,$5B54,$5B56,$5B52,$5B53,$5B5A,$5B5B,$5B59,$5B4A,$5B4B,$5B49,$5B4D,$5B4C,$5B6A,$5B6B,
$5B69,$5B6D,$5B6C,$5B65,$5B64,$5B66,$5B2A,$5B2B,$5B29,$5B2D,$5B2C,$5B25,$5B24,$5B26,$5B35,$5B34,$5B36,$5B32,$5B33,$5955,$5954,$5956,$5952,$5953,$595A,
$595B,$5959,$594A,$594B,$5949,$594D,$594C,$596A,$596B,$5969,$596D,$596C,$5965,$5964,$5966,$592A,$592B,$5929,$592D,$592C,$5925,$5924,$5926,$5935,$5934,
$5936,$5932,$5933,$59AA,$59AB,$59A9,$59AD,$59AC,$59A5,$59A4,$59A6,$59B5,$59B4,$59B6,$59B2,$59B3,$5995,$5994,$5996,$5992,$5993,$599A,$599B,$5999,$4AAA,
$4AAB,$4AA9,$4AAD,$4AAC,$4AA5,$4AA4,$4AA6,$4AB5,$4AB4,$4AB6,$4AB2,$4AB3,$4A95,$4A94,$4A96,$4A92,$4A93,$4A9A,$4A9B,$4A99,$4AD5,$4AD4,$4AD6,$4AD2,$4AD3,
$4ADA,$4ADB,$4AD9,$4ACA,$4ACB,$4AC9,$4ACD,$4ACC,$4A55,$4A54,$4A56,$4A52,$4A53,$4A5A,$4A5B,$4A59,$4A4A,$4A4B,$4A49,$4A4D,$4A4C,$4A6A,$4A6B,$4A69,$4A6D,
$4A6C,$4A65,$4A64,$4A66,$4B55,$4B54,$4B56,$4B52,$4B53,$4B5A,$4B5B,$4B59,$4B4A,$4B4B,$4B49,$4B4D,$4B4C,$4B6A,$4B6B,$4B69,$4B6D,$4B6C,$4B65,$4B64,$4B66,
$4B2A,$4B2B,$4B29,$4B2D,$4B2C,$4B25,$4B24,$4B26,$4B35,$4B34,$4B36,$4B32,$4B33,$4955,$4954,$4956,$4952,$4953,$495A,$495B,$4959,$494A,$494B,$4949,$494D,
$494C,$496A,$496B,$4969,$496D,$496C,$4965,$4964,$4966,$492A,$492B,$4929,$492D,$492C,$4925,$4924,$4926,$4935,$4934,$4936,$4932,$4933,$49AA,$49AB,$49A9,
$49AD,$49AC,$49A5,$49A4,$49A6,$49B5,$49B4,$49B6,$49B2,$49B3,$4995,$4994,$4996,$4992,$4993,$499A,$499B,$4999,$4D55,$4D54,$4D56,$4D52,$4D53,$4D5A,$4D5B,
$4D59,$4D4A,$4D4B,$4D49,$4D4D,$4D4C,$4D6A,$4D6B,$4D69,$4D6D,$4D6C,$4D65,$4D64,$4D66,$4D2A,$4D2B,$4D29,$4D2D,$4D2C,$4D25,$4D24,$4D26,$4D35,$4D34,$4D36,
$4D32,$4D33,$4DAA,$4DAB,$4DA9,$4DAD,$4DAC,$4DA5,$4DA4,$4DA6,$4DB5,$4DB4,$4DB6,$4DB2,$4DB3,$4D95,$4D94,$4D96,$4D92,$4D93,$4D9A,$4D9B,$4D99,$4CAA,$4CAB,
$4CA9,$4CAD,$4CAC,$4CA5,$4CA4,$4CA6,$4CB5,$4CB4,$4CB6,$4CB2,$4CB3,$4C95,$4C94,$4C96,$4C92,$4C93,$4C9A,$4C9B,$4C99,$4CD5,$4CD4,$4CD6,$4CD2,$4CD3,$4CDA,
$4CDB,$4CD9,$4CCA,$4CCB,$4CC9,$4CCD,$4CCC,$6AAA,$6AAB,$6AA9,$6AAD,$6AAC,$6AA5,$6AA4,$6AA6,$6AB5,$6AB4,$6AB6,$6AB2,$6AB3,$6A95,$6A94,$6A96,$6A92,$6A93,
$6A9A,$6A9B,$6A99,$6AD5,$6AD4,$6AD6,$6AD2,$6AD3,$6ADA,$6ADB,$6AD9,$6ACA,$6ACB,$6AC9,$6ACD,$6ACC,$6A55,$6A54,$6A56,$6A52,$6A53,$6A5A,$6A5B,$6A59,$6A4A,
$6A4B,$6A49,$6A4D,$6A4C,$6A6A,$6A6B,$6A69,$6A6D,$6A6C,$6A65,$6A64,$6A66,$6B55,$6B54,$6B56,$6B52,$6B53,$6B5A,$6B5B,$6B59,$6B4A,$6B4B,$6B49,$6B4D,$6B4C,
$6B6A,$6B6B,$6B69,$6B6D,$6B6C,$6B65,$6B64,$6B66,$6B2A,$6B2B,$6B29,$6B2D,$6B2C,$6B25,$6B24,$6B26,$6B35,$6B34,$6B36,$6B32,$6B33,$6955,$6954,$6956,$6952,
$6953,$695A,$695B,$6959,$694A,$694B,$6949,$694D,$694C,$696A,$696B,$6969,$696D,$696C,$6965,$6964,$6966,$692A,$692B,$6929,$692D,$692C,$6925,$6924,$6926,
$6935,$6934,$6936,$6932,$6933,$69AA,$69AB,$69A9,$69AD,$69AC,$69A5,$69A4,$69A6,$69B5,$69B4,$69B6,$69B2,$69B3,$6995,$6994,$6996,$6992,$6993,$699A,$699B,
$6999,$6D55,$6D54,$6D56,$6D52,$6D53,$6D5A,$6D5B,$6D59,$6D4A,$6D4B,$6D49,$6D4D,$6D4C,$6D6A,$6D6B,$6D69,$6D6D,$6D6C,$6D65,$6D64,$6D66,$6D2A,$6D2B,$6D29,
$6D2D,$6D2C,$6D25,$6D24,$6D26,$6D35,$6D34,$6D36,$6D32,$6D33,$6DAA,$6DAB,$6DA9,$6DAD,$6DAC,$6DA5,$6DA4,$6DA6,$6DB5,$6DB4,$6DB6,$6DB2,$6DB3,$6D95,$6D94,
$6D96,$6D92,$6D93,$6D9A,$6D9B,$6D99,$6CAA,$6CAB,$6CA9,$6CAD,$6CAC,$6CA5,$6CA4,$6CA6,$6CB5,$6CB4,$6CB6,$6CB2,$6CB3,$6C95,$6C94,$6C96,$6C92,$6C93,$6C9A,
$6C9B,$6C99,$6CD5,$6CD4,$6CD6,$6CD2,$6CD3,$6CDA,$6CDB,$6CD9,$6CCA,$6CCB,$6CC9,$6CCD,$6CCC,$6555,$6554,$6556,$6552,$6553,$655A,$655B,$6559,$654A,$654B,
$6549,$654D,$654C,$656A,$656B,$6569,$656D,$656C,$6565,$6564,$6566,$652A,$652B,$6529,$652D,$652C,$6525,$6524,$6526,$6535,$6534,$6536,$6532,$6533,$65AA,
$65AB,$65A9,$65AD,$65AC,$65A5,$65A4,$65A6,$65B5,$65B4,$65B6,$65B2,$65B3,$6595,$6594,$6596,$6592,$6593,$659A,$659B,$6599,$64AA,$64AB,$64A9,$64AD,$64AC,
$64A5,$64A4,$64A6,$64B5,$64B4,$64B6,$64B2,$64B3,$6495,$6494,$6496,$6492,$6493,$649A,$649B,$6499,$64D5,$64D4,$64D6,$64D2,$64D3,$64DA,$64DB,$64D9,$64CA,
$64CB,$64C9,$64CD,$64CC,$66AA,$66AB,$66A9,$66AD,$66AC,$66A5,$66A4,$66A6,$66B5,$66B4,$66B6,$66B2,$66B3,$6695,$6694,$6696,$6692,$6693,$669A,$669B,$6699,
$66D5,$66D4,$66D6,$66D2,$66D3,$66DA,$66DB,$66D9,$66CA,$66CB,$66C9,$66CD,$66CC,$6655,$6654,$6656,$6652,$6653,$665A,$665B,$6659,$664A,$664B,$6649,$664D,
$664C,$666A,$666B,$6669,$666D,$666C,$6665,$6664,$6666);

implementation

procedure EncodeFSK(const Data: array of word; Bits: Integer; var bin: TArray<Boolean>);
  var
   n: Integer;
   procedure AddBit(bit: Integer);
    var
     i, mx: Integer;
   begin
     mx := Bits*bit;
     for I := 0 to mx-1 do bin[n+i] := True;
     Inc(n, mx);
     for I := 0 to mx-1 do bin[n+i] := False;
     Inc(n, mx);
   end;
  var
   b, i: Integer;
   cod: Word;
   bt: integer;
begin
  n := Length(bin);
  SetLength(bin, n + Bits*(Length(Data)*34{ + 1}) );
  for I := 0 to Length(Data)-1 do
   begin
    if Data[i] > 2583 then raise Exception.Create('BAD NUMBER FIBONAHI > 2583');
    cod := FIBONACH_CODES[Data[i]];
    b := 16;
    while b > 0 do
     begin
      if (cod and $8000) <> 0 then bt := 2 else bt := 1;
      AddBit(bt);
      cod := cod shl bt;
      Dec(b, bt);
     end;
    if b = 0 then AddBit(1);
   end
end;

procedure CreateSuncro(Bits: Integer; var CurBit: Boolean; var bin: TArray<Boolean>);
 const
  SINCRO: array[0..7] of Integer = (5,  123, 1850, 1837, 1691, 2345, 1725, 1973);
  var
   n: Integer;
   procedure AddBit(bit: Boolean);
    var
     i: Integer;
   begin
     if not bit then CurBit := not CurBit;
     for I := 0 to bits-1 do bin[n+i] := CurBit;
     Inc(n, bits);
   end;
  var
   b,i: Integer;
   cod: Word;
begin
  n := 0;
  SetLength(bin, Bits*(Length(SINCRO)*16));
  for I := 0 to Length(SINCRO)-1 do
   begin
    if SINCRO[i] > 2583 then raise Exception.Create('BAD NUMBER FIBONAHI > 2583');
    cod := FIBONACH_CODES[SINCRO[i]];
    for b := 0 to 15 do
     begin
      AddBit((cod and $8000) <> 0);
      cod := cod shl 1;
     end;
   end;
end;

procedure Encode(const Data: array of Word; Bits: Integer; var bin: TArray<Boolean>); overload;
  var
   n: Integer;
   procedure AddBit(bit: Boolean);
    var
     i: Integer;
   begin
     for i := 0 to bits-1 do bin[n+i] := bit;
     Inc(n, bits);
   end;
  var
   b,i: Integer;
   bit: Boolean;
   cod: Word;
begin
  n := Length(bin);
  SetLength(bin, n + Bits*(Length(Data)*18));
  for i := 0 to Length(Data)-1 do
   begin
    if Data[i] > 2583 then raise Exception.Create('BAD NUMBER FIBONAHI > 2583');
    cod := FIBONACH_ENCODED_PSK[Data[i]];
    AddBit((cod and $8000) = 0);
    for b := 0 to 15 do
     begin
      bit := (cod and $8000) <> 0;
      AddBit(bit);
      cod := cod shl 1;
     end;
    AddBit(not bit);
   end;
end;

procedure Encode(const Data: array of Word; Bits: Integer; var CurBit: Boolean; var bin: TArray<Boolean>);
  var
   n: Integer;
   procedure AddBit(bit: Boolean);
    var
     i: Integer;
   begin
     if not bit then CurBit := not CurBit;
     for I := 0 to bits-1 do bin[n+i] := CurBit;
     Inc(n, bits);
   end;
  var
   b,i: Integer;
   cod: Word;
begin
  n := Length(bin);
  SetLength(bin, n + Bits*(Length(Data)*17{ + 1}) );
  for I := 0 to Length(Data)-1 do
   begin
    if Data[i] > 2583 then raise Exception.Create('BAD NUMBER FIBONAHI > 2583');
    cod := FIBONACH_CODES[Data[i]];
    for b := 0 to 15 do
     begin
      AddBit((cod and $8000) <> 0);
      cod := cod shl 1;
     end;
    AddBit(False);
   end;
//  CurBit := True;
//  AddBit(True);
end;

function Decode(const Data: Integer; out Res: Integer): Boolean;
 var
  i : Integer;
begin
  Result := False;
  if Data > $AAAA then Res := 2583
  else for i := 0 to Length(FIBONACH_CODES)-1 do
   if FIBONACH_CODES[i] = Data then
    begin
     Res := i;
     Exit(True)
    end
   else if FIBONACH_CODES[i] > Data then
    begin
     Res := i-1;
     Exit(False)
    end;
end;


{function Decode(const Data: TArray<Double>; Bits: Integer; out Corr: TArray<Double>; out Res: Integer): Boolean; overload;
 var
  CorrArr: TArray<Double>;
  i: Integer;
  c: Double;
begin
  Result := False;
  for i := 0 to 2583 do
   begin

   end;

end;}


function Encod(cod: Word): Word;
 var
  i: Integer;
  c: Boolean;
begin
  Result := 0;
  cod := FIBONACH_CODES[cod];
  c := (cod and $8000) = 0;
  cod  := cod shl 1;
  for i := 0 to 15 do
   begin
    Result := Result shl 1;
    if c then Result := Result or 1;
    if (cod and $8000) = 0 then c := not c;
    cod  := cod shl 1;
   end;
end;

function FastCorr(A, B: Integer; n: Integer): Integer;
 var
  R: Integer;
begin
  Result := 0;
  R := A xor B;
  while n > 0 do
   begin
    if R and 1 <> 0 then Dec(Result) else Inc(Result);
    R := R shr 1;
    Dec(n);
   end;
end;

function RMCodes: TArray<Cardinal>;
 const
  a0 = $AC83;// $38CA;// $FFFF;// $9238; // 1001001000111000
  a1 = $00FF; // 0000000011111111
  a2 = $0F0F; // 0000111100001111
  a3 = $3333; // 0011001100110011
  a4 = $5555; // 0101010101010101
  ARR_C: array[0..15] of word = (a0, a0 xor a1, a0 xor a2,a0 xor a1 xor a2, a0 xor a3,a0 xor a1 xor a3
  ,a0 xor a2 xor a3, a0 xor a1 xor a2 xor a3, a0 xor a4, a0 xor a1 xor a4,a0 xor a2 xor a4, a0 xor a1 xor a2 xor a4
  ,a0 xor a3 xor a4, a0 xor a1 xor a3 xor a4, a0 xor a2 xor a3 xor a4,a0 xor a1 xor a2 xor a3 xor a4);

 var
  i,j : Integer;
begin
  SetLength(Result, 32);
  for i := 0 to 15 do for j := 0 to 15 do
   begin
    Result[i] := Result[i] shl 2;
    if (ARR_C[i] shl j) and $8000 <> 0 then Result[i] := Result[i] or 1 else Result[i] := Result[i] or 2;
   end;
  for i := 0 to 15 do Result[i+16] := not Result[i];
end;


end.
